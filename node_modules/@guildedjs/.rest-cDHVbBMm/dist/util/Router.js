"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
const routes_1 = require("./routes");
class Router {
    constructor(rest) {
        this.rest = rest;
    }
    /**
     * Create a channel
     */
    createChannel(data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.channels(), data);
        });
    }
    /**
     * Fetch a channel
     */
    getChannel(channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.channel(channelId));
        });
    }
    /**
     * Update a channel
     */
    updateChannel(channelId, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.patch(routes_1.ROUTES.channel(channelId), data);
        });
    }
    /**
     * Delete a channel
     */
    deleteChannel(channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.channel(channelId));
        });
    }
    /**
     * Send a message to a channel
     */
    createChannelMessage(channelId, content) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.channelMessages(channelId), content);
        });
    }
    /**
     * Get a list of the latest 50 messages from a channel.
     */
    getChannelMessages(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.channelMessages(channelId), options);
        });
    }
    /**
     * Get details for a specific chat message from a chat channel.
     */
    getChannelMessage(channelId, messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.channelMessage(channelId, messageId));
        });
    }
    /**
     * Update a channel message.
     */
    updateChannelMessage(channelId, messageId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.channelMessage(channelId, messageId), options);
        });
    }
    /**
     * Delete a channel message.
     */
    deleteChannelMessage(channelId, messageId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.channelMessage(channelId, messageId));
        });
    }
    /**
     * Get a single calendar event.
     */
    getCalendarEvent(channelId, calendarEventId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.calendarEvent(channelId, calendarEventId));
        });
    }
    /**
     * Get all calendar events in a specific channel.
     */
    getCalendarEvents(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.calendarEvents(channelId), options);
        });
    }
    /**
     * Create a calendar event.
     */
    createCalendarEvent(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.calendarEvents(channelId), options);
        });
    }
    /**
     * Update an existing calendar event.
     */
    updateCalendarEvent(channelId, calendarEventId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.patch(routes_1.ROUTES.calendarEvent(channelId, calendarEventId), options);
        });
    }
    /**
     * Delete a calendar event.
     */
    deleteCalendarEvent(channelId, calendarEventId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.calendarEvent(channelId, calendarEventId));
        });
    }
    /**
     * Get a single rsvp from a calendar event
     */
    getCalendarEventRsvp(channelId, calendarEventId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.calendarEventRsvp(channelId, calendarEventId, userId));
        });
    }
    /**
     * Get rsvps from a calendar event
     */
    getCalendarEventRsvps(channelId, calendarEventId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.calendarEventRsvps(channelId, calendarEventId));
        });
    }
    /**
     * Update an rsvp user from a calendar event
     */
    updateCalendarEventRvsp(channelId, calendarEventId, userId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.calendarEventRsvp(channelId, calendarEventId, userId), options);
        });
    }
    /**
     * Delete an rsvp user from a calendar event
     */
    deleteCalendarEventRvsp(channelId, calendarEventId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.calendarEventRsvp(channelId, calendarEventId, userId));
        });
    }
    /**
     * Get a list of the roles assigned to a member using the id of the member.
     */
    getMemberRoles(serverId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.memberRoles(serverId, userId));
        });
    }
    /**
     * Update a member's nickname.
     */
    updateMemberNickname(serverId, userId, nickname) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.memberNickname(serverId, userId), { nickname });
        });
    }
    /**
     * Delete a member's nickname
     */
    deleteMemberNickname(serverId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.memberNickname(serverId, userId));
        });
    }
    /**
     * Get a server
     */
    getServer(serverId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.server(serverId));
        });
    }
    /**
     * Create a topic in a forum
     */
    createForumTopic(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.forumTopics(channelId), options);
        });
    }
    /**
     * Get all topics in a forum
     */
    getForumTopics(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.forumTopics(channelId), options);
        });
    }
    /**
     * Get a topic in a forum
     */
    getForumTopic(channelId, forumThreadId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.forumTopic(channelId, forumThreadId));
        });
    }
    /**
     * Update a topic in a forum
     */
    updateForumTopic(channelId, forumThreadId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.patch(routes_1.ROUTES.forumTopic(channelId, forumThreadId), options);
        });
    }
    /**
     * Delete a topic in a forum
     */
    deleteForumTopic(channelId, forumThreadId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.forumTopic(channelId, forumThreadId));
        });
    }
    /**
     * Pin a topic in a forum
     */
    pinForumTopic(channelId, forumThreadId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.forumTopic(channelId, forumThreadId));
        });
    }
    /**
     * Pin a topic in a forum
     */
    unpinForumTopic(channelId, forumThreadId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.forumTopic(channelId, forumThreadId));
        });
    }
    /**
     * Lock a topic in a forum
     */
    lockForumTopic(channelId, forumThreadId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.forumTopic(channelId, forumThreadId));
        });
    }
    /**
     * Unlock a topic in a forum
     */
    unlockForumTopic(channelId, forumThreadId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.forumTopic(channelId, forumThreadId));
        });
    }
    /**
     * Create a list item.
     */
    createListItem(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.listItems(channelId), options);
        });
    }
    /**
     * Get list items
     */
    getListItems(channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.listItems(channelId));
        });
    }
    /**
     * Get list item
     */
    getListItem(channelId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.listItem(channelId, itemId));
        });
    }
    /**
     * Update list item
     */
    updateListItem(channelId, itemId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.listItem(channelId, itemId), options);
        });
    }
    /**
     * Delete list item
     */
    deleteListItem(channelId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.listItem(channelId, itemId));
        });
    }
    completeListItem(channelId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.listItemComplete(channelId, itemId));
        });
    }
    uncompleteListItem(channelId, itemId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.listItemComplete(channelId, itemId));
        });
    }
    /**
     * Create a doc.
     */
    createDoc(channelId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.channelDocs(channelId), options);
        });
    }
    /**
     * Get the docs from a channel.
     */
    getDocs(channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.channelDocs(channelId));
        });
    }
    /**
     * Get a doc from a channel.
     */
    getDoc(channelId, docId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.channelDoc(channelId, docId));
        });
    }
    /**
     * Update a doc
     */
    updateDoc(channelId, docId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.channelDoc(channelId, docId), options);
        });
    }
    /**
     * Delete a doc from a channel.
     */
    deleteDoc(channelId, docId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.channelDoc(channelId, docId));
        });
    }
    /**
     * Add a reaction emote
     */
    addReactionEmote(channelId, contentId, emoteId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.channelReaction(channelId, contentId, emoteId));
        });
    }
    /**
     * Delete a reaction emote
     */
    deleteReactionEmote(channelId, contentId, emoteId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.channelReaction(channelId, contentId, emoteId));
        });
    }
    /**
     * Award XP to a member
     */
    awardMemberXP(serverId, userId, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.memberXP(serverId, userId), { amount });
        });
    }
    /**
     * Award XP to a role
     */
    awardRoleXP(serverId, roleId, amount) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.roleXP(serverId, roleId), { amount });
        });
    }
    /**
     * Retrieves a member's public social links
     */
    getMemberSocialLinks(serverId, userId, type) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.memberSocialLinks(serverId, userId, type));
        });
    }
    getMember(serverId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.member(serverId, userId));
        });
    }
    getMembers(serverId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.members(serverId));
        });
    }
    kickMember(serverId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.member(serverId, userId));
        });
    }
    /**
     * Ban a member from a server
     */
    banMember(serverId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.memberBan(serverId, userId));
        });
    }
    /**
     * Retrieve a ban from a server
     */
    getMemberBan(serverId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.memberBan(serverId, userId));
        });
    }
    /**
     * Unban a member from a server
     */
    unbanMember(serverId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.memberBan(serverId, userId));
        });
    }
    /**
     * Get all bans in a server
     */
    getMemberBans(serverId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.memberBans(serverId));
        });
    }
    /**
     * Add member to group
     */
    addMemberToGroup(groupId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.groupMember(groupId, userId));
        });
    }
    /**
     * Remove member from group
     */
    removeMemberFromGroup(groupId, userId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.groupMember(groupId, userId));
        });
    }
    /**
     * Assign role to member
     */
    assignRoleToMember(serverId, userId, roleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.memberRole(serverId, userId, roleId));
        });
    }
    /**
     * Remove role to member
     */
    removeRoleFromMember(serverId, userId, roleId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.memberRole(serverId, userId, roleId));
        });
    }
    /**
     * Create a webhook
     */
    createWebhook(serverId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.post(routes_1.ROUTES.serverWebhooks(serverId), options);
        });
    }
    /**
     * Get a server's webhooks
     */
    getWebhooks(serverId, channelId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.serverWebhooks(serverId), channelId ? { channelId } : undefined);
        });
    }
    /**
     * Get a webhook
     */
    getWebhook(serverId, webhookId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.get(routes_1.ROUTES.serverWebhook(serverId, webhookId));
        });
    }
    /**
     * Update a webhook
     */
    updateWebhook(serverId, webhookId, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.put(routes_1.ROUTES.serverWebhook(serverId, webhookId), options);
        });
    }
    /**
     * Delete a webhook
     */
    deleteWebhook(serverId, webhookId) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.rest.delete(routes_1.ROUTES.serverWebhook(serverId, webhookId));
        });
    }
}
exports.Router = Router;
//# sourceMappingURL=Router.js.map