"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Data = void 0;
const methods_1 = require("../methods");
class Data {
    collection;
    filter;
    separator;
    constructor(collection, filter, separator) {
        this.collection = collection;
        this.filter = filter;
        this.separator = separator;
    }
    /**
     * Set a value to a key
     *
     * @param {string} key - The name of the key
     * @param {any} value - The key's value
     *
     * @returns {any} The key's value
     */
    set(key, value) {
        return (0, methods_1.set)(this, key, value);
    }
    /**
     * Get the value of a key
     *
     * @param {string} key - The name of the key
     *
     * @returns {any} The key's value
     */
    get(key) {
        return (0, methods_1.get)(this, key);
    }
    /**
     * Delete the value of a key
     *
     * @param {string} key - The name of the key
     *
     * @returns {boolean} true
     */
    delete(key) {
        return (0, methods_1.del)(this, key);
    }
    /**
     * Check if a key exists
     *
     * @param {string} key - The name of the key
     *
     * @returns {boolean} If the key exists
     */
    has(key) {
        return (0, methods_1.has)(this, key);
    }
    /**
     * Get the JSON file
     *
     * @returns {object} The JSON file
     */
    all() {
        return (0, methods_1.all)(this);
    }
    /**
     * Delete all saved data
     *
     * @returns {object} The JSON file
     */
    clear() {
        return (0, methods_1.clear)(this);
    }
    /**
     * Push an item into an array
     *
     * @param {string} key - The name of the key
     * @param {any} item - The item
     *
     * @returns {any} The key's value
     */
    push(key, item) {
        return (0, methods_1.push)(this, key, item);
    }
    /**
     * Pull an item from an array
     *
     * @param {string} key - The name of the key
     * @param {any} item - The item
     *
     * @returns {any} The key's value
     */
    pull(key, item) {
        return (0, methods_1.pull)(this, key, item);
    }
    /**
     * Add a number to a key value
     *
     * @param {string} key - The name of the key
     * @param {number} number - The number
     *
     * @returns {any} The key's value
     */
    add(key, number) {
        return (0, methods_1.add)(this, key, number);
    }
    /**
     * Remove a number from a key value
     *
     * @param {string} key - The name of the key
     * @param {number} number - The number
     *
     * @returns {any} The key's value
     */
    remove(key, number) {
        return (0, methods_1.remove)(this, key, number);
    }
}
exports.Data = Data;
//# sourceMappingURL=Data.js.map