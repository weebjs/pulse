"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerMemberRoleManager = void 0;
const BaseManager_1 = require("../BaseManager");
/**
 * The manager of roles that belong to a server member.
 * @example new ServerMemberRoleManager(member);
 */
class ServerMemberRoleManager extends BaseManager_1.BaseManager {
    member;
    /** @param member The server member the roles belong to. */
    constructor(member) {
        super(member.client, member.client.options.maxServerMemberRoleCache);
        this.member = member;
    }
    /**
     * Fetch roles that belong to the member.
     * @param options The options to fetch the roles with.
     * @returns The fetched roles that belong to the member.
     * @example roles.fetch();
     */
    fetch(options) {
        return this.member.server.roles.fetch(this.member, {
            cache: options?.cacheServerRoles,
            cacheMemberRoles: options?.cache,
        });
    }
    /**
     * Assign a role to the member.
     * @param role The role to add to the member.
     * @returns The role that was added to the member.
     * @example roles.assign(role);
     */
    assign(role) {
        return this.member.server.roles.assign(this.member, role);
    }
    /**
     * Unassign a role from the member.
     * @param role The role to remove from the member.
     * @returns The role that was removed from the member.
     * @example roles.unassign(role);
     */
    unassign(role) {
        return this.member.server.roles.unassign(this.member, role);
    }
}
exports.ServerMemberRoleManager = ServerMemberRoleManager;
//# sourceMappingURL=ServerMemberRoleManager.js.map