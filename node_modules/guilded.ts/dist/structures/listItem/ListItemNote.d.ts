import { APIMentions, APIListItemNote, APIListItemNoteSummary } from 'guilded-api-typings';
import { FetchOptions } from '../../managers/BaseManager';
import { Base } from '../Base';
import { ListItem } from './ListItem';
/**
 * Represents a list item note on Guilded.
 * @example new ListItemNote(item, rawListItemNote);
 */
export declare class ListItemNote extends Base {
    readonly item: ListItem;
    readonly raw: APIListItemNote | APIListItemNoteSummary;
    /** The date the list item note was created. */
    readonly createdAt: Date;
    /** The ID of the user that created the list item note. */
    readonly createdBy: string;
    /** The date the list item note was edited. */
    readonly editedAt?: Date;
    /** The ID of the user that edited the list item note. */
    readonly editedBy?: string;
    /** The mentions of the list item note. */
    readonly mentions?: APIMentions;
    /** The content of the list item note. */
    readonly content?: string;
    /**
     * @param item The list item the note belongs to.
     * @param raw The raw data of the list item note.
     */
    constructor(item: ListItem, raw: APIListItemNote | APIListItemNoteSummary);
    /** The timestamp the list item note was created. */
    get createdTimestamp(): number;
    /** The server member that created the list item note. */
    get author(): import("../..").ServerMember | undefined;
    /** The timestamp the list item note was edited. */
    get editedTimestamp(): number | undefined;
    /** The server member that edited the list item note. */
    get editor(): import("../..").ServerMember | undefined;
    /**
     * Fetch the server member that created the list item note.
     * @param options The options to fetch the server member with.
     * @returns The fetched server member.
     * @example note.fetchAuthor();
     */
    fetchAuthor(options?: FetchOptions): Promise<import("../..").ServerMember>;
    /**
     * Fetch the server member that edited the list item note.
     * @param options The options to fetch the server member with.
     * @returns The fetched server member.
     * @example note.fetchEditor();
     */
    fetchEditor(options?: FetchOptions): Promise<import("../..").ServerMember | undefined>;
}
//# sourceMappingURL=ListItemNote.d.ts.map