"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleWSEvent = void 0;
const calendarEvent = __importStar(require("./events/calendarEvent"));
const channel = __importStar(require("./events/channel"));
const doc = __importStar(require("./events/doc"));
const forumTopic = __importStar(require("./events/forumTopic"));
const listItem = __importStar(require("./events/listItem"));
const message = __importStar(require("./events/message"));
const server = __importStar(require("./events/server"));
const serverMember = __importStar(require("./events/serverMember"));
const webhook = __importStar(require("./events/webhook"));
/** A map of all WebSocket events with their respective handlers. */
const WSEventHandler = {
    BotServerMembershipCreated: server.botAdded,
    BotServerMembershipDeleted: server.botRemoved,
    ChatMessageCreated: message.created,
    ChatMessageUpdated: message.updated,
    ChatMessageDeleted: message.deleted,
    ServerMemberJoined: serverMember.joined,
    ServerMemberRemoved: serverMember.removed,
    ServerMemberBanned: serverMember.banned,
    ServerMemberUnbanned: serverMember.unbanned,
    ServerMemberUpdated: serverMember.updated,
    ServerRolesUpdated: server.rolesUpdated,
    ServerChannelCreated: channel.created,
    ServerChannelUpdated: channel.updated,
    ServerChannelDeleted: channel.deleted,
    ServerWebhookCreated: webhook.created,
    ServerWebhookUpdated: webhook.updated,
    DocCreated: doc.created,
    DocUpdated: doc.updated,
    DocDeleted: doc.deleted,
    CalendarEventCreated: calendarEvent.created,
    CalendarEventUpdated: calendarEvent.updated,
    CalendarEventDeleted: calendarEvent.deleted,
    ForumTopicCreated: forumTopic.created,
    ForumTopicUpdated: forumTopic.updated,
    ForumTopicDeleted: forumTopic.deleted,
    ForumTopicPinned: forumTopic.pinned,
    ForumTopicUnpinned: forumTopic.unpinned,
    ForumTopicLocked: forumTopic.locked,
    ForumTopicUnlocked: forumTopic.unlocked,
    CalendarEventRsvpUpdated: calendarEvent.rsvpUpdated,
    CalendarEventRsvpManyUpdated: calendarEvent.rsvpsUpdated,
    CalendarEventRsvpDeleted: calendarEvent.rsvpDeleted,
    ListItemCreated: listItem.created,
    ListItemUpdated: listItem.updated,
    ListItemDeleted: listItem.deleted,
    ListItemCompleted: listItem.completed,
    ListItemUncompleted: listItem.uncompleted,
    ChannelMessageReactionCreated: message.reactionCreated,
    ChannelMessageReactionDeleted: message.reactionDeleted,
};
/**
 * Handle a Websocket event.
 * @param client The client the Websocket belongs to.
 * @param event The name of the event.
 * @param data The data of the event.
 */
function handleWSEvent(client, event, data) {
    return WSEventHandler[event]?.(client, data);
}
exports.handleWSEvent = handleWSEvent;
//# sourceMappingURL=index.js.map