"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.botRemoved = exports.botAdded = exports.rolesUpdated = void 0;
const collection_1 = require("@discordjs/collection");
const Server_1 = require("../../structures/server/Server");
/**
 * Handle the ServerRolesUpdated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function rolesUpdated(client, data) {
    const server = await client.servers.fetch(data.serverId);
    const oldMembers = new collection_1.Collection();
    const newMembers = new collection_1.Collection();
    for (const { roleIds, userId } of data.memberRoleIds) {
        const oldMember = server.members.cache.get(userId);
        const newMember = await server.members.fetch(userId);
        newMember.roleIds = roleIds || [];
        if (oldMember)
            oldMembers.set(userId, oldMember);
        newMembers.set(userId, newMember);
    }
    client.emit('serverRolesEdit', newMembers, oldMembers);
}
exports.rolesUpdated = rolesUpdated;
/**
 * Handle the BotServerMembershipCreated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function botAdded(client, data) {
    const server = new Server_1.Server(client, data.server);
    const addedBy = await server.members.fetch(data.createdBy);
    client.emit('serverAdd', server, addedBy);
}
exports.botAdded = botAdded;
/**
 * Handle the BotServerMembershipDeleted event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function botRemoved(client, data) {
    const server = new Server_1.Server(client, data.server);
    const removedBy = server.members.cache.get(data.deletedBy);
    client.emit('serverRemove', server, removedBy);
}
exports.botRemoved = botRemoved;
//# sourceMappingURL=server.js.map