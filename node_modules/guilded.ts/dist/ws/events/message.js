"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.reactionDeleted = exports.reactionCreated = exports.deleted = exports.updated = exports.created = void 0;
const Message_1 = require("../../structures/message/Message");
const MessageReaction_1 = require("../../structures/message/MessageReaction");
/**
 * Handle the ChatMessageCreated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function created(client, data) {
    const channel = (await client.channels.fetch(data.message.channelId));
    const message = new Message_1.Message(channel, data.message);
    client.emit('messageCreate', message);
}
exports.created = created;
/**
 * Handle the ChatMessageUpdated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function updated(client, data) {
    const channel = (await client.channels.fetch(data.message.channelId));
    const oldMessage = channel.messages.cache.get(data.message.id);
    const newMessage = new Message_1.Message(channel, data.message);
    client.emit('messageEdit', newMessage, oldMessage);
}
exports.updated = updated;
/**
 * Handle the ChatMessageDeleted event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function deleted(client, data) {
    const channel = (await client.channels.fetch(data.message.channelId));
    const message = channel.messages.cache.get(data.message.id);
    if (message)
        message.deletedAt = new Date(data.message.deletedAt);
    if (client.options.disposeCachedMessages ?? true)
        channel.messages.cache.delete(data.message.id);
    client.emit('messageDelete', message ?? data.message);
}
exports.deleted = deleted;
/**
 * Handle the ChannelMessageReactionCreated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function reactionCreated(client, data) {
    const channel = (await client.channels.fetch(data.reaction.channelId));
    const message = await channel.messages.fetch(data.reaction.messageId);
    const reaction = new MessageReaction_1.MessageReaction(message, data.reaction);
    client.emit('messageReactionAdd', reaction);
}
exports.reactionCreated = reactionCreated;
/**
 * Handle the ChannelMessageReactionDeleted event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function reactionDeleted(client, data) {
    const channel = (await client.channels.fetch(data.reaction.channelId));
    const message = await channel.messages.fetch(data.reaction.messageId);
    const reaction = new MessageReaction_1.MessageReaction(message, data.reaction);
    if (client.options.disposeCachedMessageReactions ?? true)
        message.reactions.cache.delete(reaction.id);
    client.emit('messageReactionRemove', reaction);
}
exports.reactionDeleted = reactionDeleted;
//# sourceMappingURL=message.js.map