import { WSEvents } from 'guilded-api-typings';
import { Client } from '../../structures/Client';
/**
 * Handle the CalendarEventCreated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
export declare function created(client: Client, data: WSEvents['CalendarEventCreated']): Promise<void>;
/**
 * Handle the CalendarEventUpdated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
export declare function updated(client: Client, data: WSEvents['CalendarEventUpdated']): Promise<void>;
/**
 * Handle the CalendarEventDeleted event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
export declare function deleted(client: Client, data: WSEvents['CalendarEventDeleted']): Promise<void>;
/**
 * Handle the CalendarEventRsvpUpdated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
export declare function rsvpUpdated(client: Client, data: WSEvents['CalendarEventRsvpUpdated']): Promise<void>;
/**
 * Handle the CalendarEventRsvpManyUpdated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
export declare function rsvpsUpdated(client: Client, data: WSEvents['CalendarEventRsvpManyUpdated']): Promise<void>;
/**
 * Handle the CalendarEventRsvpDeleted event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
export declare function rsvpDeleted(client: Client, data: WSEvents['CalendarEventRsvpDeleted']): Promise<void>;
//# sourceMappingURL=calendarEvent.d.ts.map