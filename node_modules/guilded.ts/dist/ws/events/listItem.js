"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.uncompleted = exports.completed = exports.deleted = exports.updated = exports.created = void 0;
const ListItem_1 = require("../../structures/listItem/ListItem");
/**
 * Handle the ListItemCreated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function created(client, data) {
    const channel = (await client.channels.fetch(data.listItem.channelId));
    const listItem = new ListItem_1.ListItem(channel, data.listItem);
    client.emit('listItemCreate', listItem);
}
exports.created = created;
/**
 * Handle the ListItemUpdated event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function updated(client, data) {
    const channel = (await client.channels.fetch(data.listItem.channelId));
    const oldListItem = channel.items.cache.get(data.listItem.id);
    const newListItem = new ListItem_1.ListItem(channel, data.listItem);
    client.emit('listItemEdit', newListItem, oldListItem);
}
exports.updated = updated;
/**
 * Handle the ListItemDeleted event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function deleted(client, data) {
    const channel = (await client.channels.fetch(data.listItem.channelId));
    const listItem = new ListItem_1.ListItem(channel, data.listItem);
    if (client.options.disposeCachedListItems ?? true)
        channel.items.cache.delete(listItem.id);
    client.emit('listItemDelete', listItem);
}
exports.deleted = deleted;
/**
 * Handle the ListItemCompleted event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function completed(client, data) {
    const channel = (await client.channels.fetch(data.listItem.channelId));
    const listItem = new ListItem_1.ListItem(channel, data.listItem);
    client.emit('listItemComplete', listItem);
}
exports.completed = completed;
/**
 * Handle the ListItemUncompleted event.
 * @param client The client the Websocket belongs to.
 * @param data The data of the event.
 */
async function uncompleted(client, data) {
    const channel = (await client.channels.fetch(data.listItem.channelId));
    const listItem = new ListItem_1.ListItem(channel, data.listItem);
    client.emit('listItemUncomplete', listItem);
}
exports.uncompleted = uncompleted;
//# sourceMappingURL=listItem.js.map