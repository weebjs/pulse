"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.toCamelCase = exports.toSnakeCase = exports.Color = exports.resolveColor = void 0;
const lodash_snakecase_1 = __importDefault(require("lodash.snakecase"));
const lodash_camelcase_1 = __importDefault(require("lodash.camelcase"));
/**
 * Resolve a color from a string, number, RGB array or color preset.
 * Inspired by discord.js'
 * {@link https://github.com/discordjs/discord.js/blob/main/packages/discord.js/src/util/Util.js#L476 color resolver}.
 * @param color The color to resolve.
 * @returns The resolved color.
 * @example
 * // Resolve the color with a hex color.
 * resolveColor(0xFFFFFF);
 * resolveColor('#FFFFFF');
 * // Resolve the color with a color preset.
 * resolveColor('White');
 * // Resolve the color with RGB values.
 * resolveColor([255, 255, 255]);
 */
function resolveColor(color) {
    if (color === 'Random')
        color = Math.floor(Math.random() * (0xffffff + 1));
    else if (typeof color === `string`)
        color = Color[color] || parseInt(color.replace('#', ''), 16);
    else if (Array.isArray(color))
        color = (color[0] << 16) + (color[1] << 8) + color[2];
    return color;
}
exports.resolveColor = resolveColor;
/** A set of color presets. */
var Color;
(function (Color) {
    Color[Color["Default"] = 0] = "Default";
    Color[Color["White"] = 16777215] = "White";
    Color[Color["Aqua"] = 1752220] = "Aqua";
    Color[Color["Green"] = 5763719] = "Green";
    Color[Color["Blue"] = 3447003] = "Blue";
    Color[Color["Yellow"] = 16705372] = "Yellow";
    Color[Color["Purple"] = 10181046] = "Purple";
    Color[Color["LuminousVividPink"] = 15277667] = "LuminousVividPink";
    Color[Color["Fuchsia"] = 15418782] = "Fuchsia";
    Color[Color["Gold"] = 15844367] = "Gold";
    Color[Color["Gilded"] = 16106496] = "Gilded";
    Color[Color["Orange"] = 15105570] = "Orange";
    Color[Color["Red"] = 15548997] = "Red";
    Color[Color["Grey"] = 9807270] = "Grey";
    Color[Color["Navy"] = 3426654] = "Navy";
    Color[Color["DarkAqua"] = 1146986] = "DarkAqua";
    Color[Color["DarkGreen"] = 2067276] = "DarkGreen";
    Color[Color["DarkBlue"] = 2123412] = "DarkBlue";
    Color[Color["DarkPurple"] = 7419530] = "DarkPurple";
    Color[Color["DarkVividPink"] = 11342935] = "DarkVividPink";
    Color[Color["DarkGold"] = 12745742] = "DarkGold";
    Color[Color["DarkOrange"] = 11027200] = "DarkOrange";
    Color[Color["DarkRed"] = 10038562] = "DarkRed";
    Color[Color["DarkGrey"] = 9936031] = "DarkGrey";
    Color[Color["DarkerGrey"] = 8359053] = "DarkerGrey";
    Color[Color["LightGrey"] = 12370112] = "LightGrey";
    Color[Color["DarkNavy"] = 2899536] = "DarkNavy";
    Color[Color["Blurple"] = 5793266] = "Blurple";
    Color[Color["Greyple"] = 10070709] = "Greyple";
    Color[Color["DarkButNotBlack"] = 2895667] = "DarkButNotBlack";
    Color[Color["NotQuiteBlack"] = 2303786] = "NotQuiteBlack";
})(Color = exports.Color || (exports.Color = {}));
/**
 * Covert object keys to snake_case.
 * @param target The target object.
 * @returns The snake_case result.
 * @example toSnakeCase({ helloWorld: 'Hello World!' }); // { hello_world: 'Hello World!' }
 */
function toSnakeCase(target) {
    if (typeof target !== 'object' || !target)
        return target;
    if (target instanceof Date)
        return target;
    if (Array.isArray(target))
        return target.map(toSnakeCase);
    return Object.fromEntries(Object.entries(target).map(([key, value]) => [(0, lodash_snakecase_1.default)(key), toSnakeCase(value)]));
}
exports.toSnakeCase = toSnakeCase;
/**
 * Covert object keys to camelCase.
 * @param target The target object.
 * @returns The camelCase result.
 * @example toCamelCase({ hello_world: 'Hello World!' }); // { helloWorld: 'Hello World!' }
 */
function toCamelCase(target) {
    if (typeof target !== 'object' || !target)
        return target;
    if (target instanceof Date)
        return target;
    if (Array.isArray(target))
        return target.map(toSnakeCase);
    return Object.fromEntries(Object.entries(target).map(([key, value]) => [(0, lodash_camelcase_1.default)(key), toCamelCase(value)]));
}
exports.toCamelCase = toCamelCase;
//# sourceMappingURL=transform.js.map