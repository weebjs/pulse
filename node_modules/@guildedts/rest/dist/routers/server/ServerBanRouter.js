"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerBanRouter = void 0;
const guilded_api_typings_1 = require("guilded-api-typings");
const BaseRouter_1 = require("../BaseRouter");
/**
 * The server ban router for the Guilded REST API.
 * @example new ServerBanRouter(rest);
 */
class ServerBanRouter extends BaseRouter_1.BaseRouter {
    /** @ignore */
    fetch(serverId, banId) {
        if (banId)
            return this.fetchSingle(serverId, banId);
        return this.fetchMany(serverId);
    }
    /** @ignore */
    async fetchSingle(serverId, banId) {
        const { serverMemberBan } = await this.rest.get(guilded_api_typings_1.Routes.serverBan(serverId, banId));
        return serverMemberBan;
    }
    /** @ignore */
    async fetchMany(serverId) {
        const { serverMemberBans } = await this.rest.get(guilded_api_typings_1.Routes.serverBans(serverId));
        return serverMemberBans;
    }
    /**
     * Create a server ban on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to ban.
     * @param reason The reason of the server ban.
     * @returns The created server ban.
     * @example serverBans.create('abc', 'abc', 'Spamming');
     */
    async create(serverId, memberId, reason) {
        const { serverMemberBan } = await this.rest.post(guilded_api_typings_1.Routes.serverBan(serverId, memberId), { reason });
        return serverMemberBan;
    }
    /**
     * Delete a server ban from Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to unban.
     * @example serverBans.delete('abc', 'abc');
     */
    delete(serverId, memberId) {
        return this.rest.delete(guilded_api_typings_1.Routes.serverBan(serverId, memberId));
    }
}
exports.ServerBanRouter = ServerBanRouter;
//# sourceMappingURL=ServerBanRouter.js.map