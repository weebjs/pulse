import { APIServerMember, APISocialLink } from 'guilded-api-typings';
import { BaseRouter } from '../BaseRouter';
/**
 * The server member router for the Guilded REST API.
 * @example new ServerMemberRouter(rest);
 */
export declare class ServerMemberRouter extends BaseRouter {
    /**
     * Fetch a server member from Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to fetch.
     * @returns The fetched server member.
     * @example serverMembers.fetch('abc', 'abc');
     */
    fetch(serverId: string, memberId: string): Promise<APIServerMember>;
    /**
     * Fetch server members from Guilded.
     * @param serverId The ID of the server the members belong to.
     * @returns The fetched server members.
     * @example serverMembers.fetch('abc');
     */
    fetch(serverId: string): Promise<APIServerMember[]>;
    /** @ignore */
    private fetchSingle;
    /** @ignore */
    private fetchMany;
    /**
     * Set the nickname of a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to edit.
     * @param nickname The nickname of the server member.
     * @returns The nickname that was set.
     * @example serverMembers.setNickname('abc', 'abc', 'nickname');
     */
    setNickname(serverId: string, memberId: string, nickname: string): Promise<string>;
    /**
     * Remove the nickname of a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to edit.
     * @example serverMembers.removeNickname('abc', 'abc');
     */
    removeNickname(serverId: string, memberId: string): Promise<void>;
    /**
     * Kick a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to kick.
     * @example serverMembers.kick('abc', 'abc');
     */
    kick(serverId: string, memberId: string): Promise<void>;
    /**
     * Award XP to a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to award XP to.
     * @param amount The amount of XP to award to the server member.
     * @returns The total amount of XP the server member has.
     * @example serverMembers.awardXp('abc', 'abc', 100);
     */
    awardXp(serverId: string, memberId: string, amount: number): Promise<number>;
    /**
     * Set XP of a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to set XP for.
     * @param amount The total XP of the server member.
     * @returns The total amount of XP the server member has.
     * @example serverMembers.setXp('abc', 'abc', 100);
     */
    setXp(serverId: string, memberId: string, amount: number): Promise<number>;
    /**
     * Fetch a social link for a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to fetch the social link for.
     * @param type The type of social link to fetch.
     * @returns The fetched social link.
     * @example serverMembers.fetchSocialLink('abc', 'abc', 'youtube');
     */
    fetchSocialLink(serverId: string, memberId: string, type: string): Promise<APISocialLink>;
    /**
     * Fetch a list of roles that a server member has on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to fetch the roles for.
     * @returns The IDs of roles the server member has.
     * @example serverMembers.fetchRoles('abc', 'abc');
     */
    fetchRoles(serverId: string, memberId: string): Promise<number[]>;
    /**
     * Add a role to a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to add the role to.
     * @param roleId The ID of the role to add to the server member.
     * @example serverMembers.addRole('abc', 'abc', 123);
     */
    addRole(serverId: string, memberId: string, roleId: number): Promise<void>;
    /**
     * Remove a role from a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to remove the role from.
     * @param roleId The ID of the role to remove from the server member.
     * @example serverMembers.removeRole('abc', 'abc', 123);
     */
    removeRole(serverId: string, memberId: string, roleId: number): Promise<void>;
}
//# sourceMappingURL=ServerMemberRouter.d.ts.map