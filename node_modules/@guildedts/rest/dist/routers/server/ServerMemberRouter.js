"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerMemberRouter = void 0;
const guilded_api_typings_1 = require("guilded-api-typings");
const BaseRouter_1 = require("../BaseRouter");
/**
 * The server member router for the Guilded REST API.
 * @example new ServerMemberRouter(rest);
 */
class ServerMemberRouter extends BaseRouter_1.BaseRouter {
    /** @ignore */
    fetch(serverId, memberId) {
        if (memberId)
            return this.fetchSingle(serverId, memberId);
        return this.fetchMany(serverId);
    }
    /** @ignore */
    async fetchSingle(serverId, memberId) {
        const { member } = await this.rest.get(guilded_api_typings_1.Routes.serverMember(serverId, memberId));
        return member;
    }
    /** @ignore */
    async fetchMany(serverId) {
        const { members } = await this.rest.get(guilded_api_typings_1.Routes.serverMembers(serverId));
        return members;
    }
    /**
     * Set the nickname of a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to edit.
     * @param nickname The nickname of the server member.
     * @returns The nickname that was set.
     * @example serverMembers.setNickname('abc', 'abc', 'nickname');
     */
    async setNickname(serverId, memberId, nickname) {
        await this.rest.put(guilded_api_typings_1.Routes.serverNickname(serverId, memberId), { nickname });
        return nickname;
    }
    /**
     * Remove the nickname of a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to edit.
     * @example serverMembers.removeNickname('abc', 'abc');
     */
    removeNickname(serverId, memberId) {
        return this.rest.delete(guilded_api_typings_1.Routes.serverNickname(serverId, memberId));
    }
    /**
     * Kick a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to kick.
     * @example serverMembers.kick('abc', 'abc');
     */
    kick(serverId, memberId) {
        return this.rest.delete(guilded_api_typings_1.Routes.serverMember(serverId, memberId));
    }
    /**
     * Award XP to a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to award XP to.
     * @param amount The amount of XP to award to the server member.
     * @returns The total amount of XP the server member has.
     * @example serverMembers.awardXp('abc', 'abc', 100);
     */
    async awardXp(serverId, memberId, amount) {
        const { total } = await this.rest.post(guilded_api_typings_1.Routes.serverMemberXp(serverId, memberId), { amount });
        return total;
    }
    /**
     * Set XP of a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to set XP for.
     * @param amount The total XP of the server member.
     * @returns The total amount of XP the server member has.
     * @example serverMembers.setXp('abc', 'abc', 100);
     */
    async setXp(serverId, memberId, amount) {
        const { total } = await this.rest.put(guilded_api_typings_1.Routes.serverMemberXp(serverId, memberId), { total: amount });
        return total;
    }
    /**
     * Fetch a social link for a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to fetch the social link for.
     * @param type The type of social link to fetch.
     * @returns The fetched social link.
     * @example serverMembers.fetchSocialLink('abc', 'abc', 'youtube');
     */
    async fetchSocialLink(serverId, memberId, type) {
        const { socialLink } = await this.rest.get(guilded_api_typings_1.Routes.socialLink(serverId, memberId, type));
        return socialLink;
    }
    /**
     * Fetch a list of roles that a server member has on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to fetch the roles for.
     * @returns The IDs of roles the server member has.
     * @example serverMembers.fetchRoles('abc', 'abc');
     */
    async fetchRoles(serverId, memberId) {
        const { roleIds } = await this.rest.get(guilded_api_typings_1.Routes.serverMemberRoles(serverId, memberId));
        return roleIds;
    }
    /**
     * Add a role to a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to add the role to.
     * @param roleId The ID of the role to add to the server member.
     * @example serverMembers.addRole('abc', 'abc', 123);
     */
    addRole(serverId, memberId, roleId) {
        return this.rest.put(guilded_api_typings_1.Routes.serverMemberRole(serverId, memberId, roleId));
    }
    /**
     * Remove a role from a server member on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to remove the role from.
     * @param roleId The ID of the role to remove from the server member.
     * @example serverMembers.removeRole('abc', 'abc', 123);
     */
    removeRole(serverId, memberId, roleId) {
        return this.rest.delete(guilded_api_typings_1.Routes.serverMemberRole(serverId, memberId, roleId));
    }
}
exports.ServerMemberRouter = ServerMemberRouter;
//# sourceMappingURL=ServerMemberRouter.js.map