import { APIServerBan } from 'guilded-api-typings';
import { BaseRouter } from '../BaseRouter';
/**
 * The server ban router for the Guilded REST API.
 * @example new ServerBanRouter(rest);
 */
export declare class ServerBanRouter extends BaseRouter {
    /**
     * Fetch a server ban from Guilded.
     * @param serverId The ID of the server the ban belong to.
     * @param banId The ID of the server ban to fetch.
     * @returns The fetched server ban.
     * @example serverBans.fetch('abc', 'abc');
     */
    fetch(serverId: string, banId: string): Promise<APIServerBan>;
    /**
     * Fetch server bans from Guilded.
     * @param serverId The ID of the server the bans belong to.
     * @returns The fetched server bans.
     * @example serverBans.fetch('abc');
     */
    fetch(serverId: string): Promise<APIServerBan[]>;
    /** @ignore */
    private fetchSingle;
    /** @ignore */
    private fetchMany;
    /**
     * Create a server ban on Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to ban.
     * @param reason The reason of the server ban.
     * @returns The created server ban.
     * @example serverBans.create('abc', 'abc', 'Spamming');
     */
    create(serverId: string, memberId: string, reason?: string): Promise<APIServerBan>;
    /**
     * Delete a server ban from Guilded.
     * @param serverId The ID of the server the member belongs to.
     * @param memberId The ID of the server member to unban.
     * @example serverBans.delete('abc', 'abc');
     */
    delete(serverId: string, memberId: string): Promise<void>;
}
//# sourceMappingURL=ServerBanRouter.d.ts.map