"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ForumTopicRouter = void 0;
const guilded_api_typings_1 = require("guilded-api-typings");
const BaseRouter_1 = require("./BaseRouter");
/**
 * The forum topic router for the Guilded REST API.
 * @example new ForumTopicRouter(rest);
 */
class ForumTopicRouter extends BaseRouter_1.BaseRouter {
    /** @ignore */
    fetch(channelId, docIdOrOptions) {
        if (typeof docIdOrOptions === 'number')
            return this.fetchSingle(channelId, docIdOrOptions);
        return this.fetchMany(channelId, docIdOrOptions);
    }
    /** @ignore */
    async fetchSingle(channelId, forumTopicId) {
        const { forumTopic } = await this.rest.get(guilded_api_typings_1.Routes.forumTopic(channelId, forumTopicId));
        return forumTopic;
    }
    /** @ignore */
    async fetchMany(channelId, options) {
        const { forumTopics } = await this.rest.get(guilded_api_typings_1.Routes.forumTopics(channelId), options);
        return forumTopics;
    }
    /**
     * Create a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param payload The payload of the forum topic.
     * @returns The created forum topic.
     * @example topics.create('abc', { title: 'My Topic!' });
     */
    async create(channelId, payload) {
        const { forumTopic } = await this.rest.post(guilded_api_typings_1.Routes.forumTopics(channelId), payload);
        return forumTopic;
    }
    /**
     * Edit a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to edit.
     * @param payload The payload of the forum topic.
     * @returns The edited forum topic.
     * @example topics.edit('abc', 123, { title: 'New Title', content: 'New Content' });
     */
    async edit(channelId, forumTopicId, payload) {
        const { forumTopic } = await this.rest.put(guilded_api_typings_1.Routes.forumTopic(channelId, forumTopicId), payload);
        return forumTopic;
    }
    /**
     * Delete a forum topic from Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to delete.
     * @example topics.delete('abc', 123);
     */
    delete(channelId, forumTopicId) {
        return this.rest.delete(guilded_api_typings_1.Routes.forumTopic(channelId, forumTopicId));
    }
    /**
     * Pin a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to pin.
     * @example topics.pin('abc', 123);
     */
    pin(channelId, forumTopicId) {
        return this.rest.put(guilded_api_typings_1.Routes.forumTopicPin(channelId, forumTopicId));
    }
    /**
     * Unpin a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to unpin.
     * @example topics.unpin('abc', 123);
     */
    unpin(channelId, forumTopicId) {
        return this.rest.delete(guilded_api_typings_1.Routes.forumTopicPin(channelId, forumTopicId));
    }
    /**
     * Lock a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to lock.
     * @example topics.lock('abc', 123);
     */
    lock(channelId, forumTopicId) {
        return this.rest.put(guilded_api_typings_1.Routes.forumTopicLock(channelId, forumTopicId));
    }
    /**
     * Unlock a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to unlock.
     * @example topics.unlock('abc', 123);
     */
    unlock(channelId, forumTopicId) {
        return this.rest.delete(guilded_api_typings_1.Routes.forumTopicLock(channelId, forumTopicId));
    }
}
exports.ForumTopicRouter = ForumTopicRouter;
//# sourceMappingURL=ForumTopicRouter.js.map