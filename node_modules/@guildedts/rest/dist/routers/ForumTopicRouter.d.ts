import { APIForumTopic, APIForumTopicEditPayload, APIForumTopicFetchManyOptions, APIForumTopicSummary, APIForumTopicPayload } from 'guilded-api-typings';
import { BaseRouter } from './BaseRouter';
/**
 * The forum topic router for the Guilded REST API.
 * @example new ForumTopicRouter(rest);
 */
export declare class ForumTopicRouter extends BaseRouter {
    /**
     * Fetch a forum topic from Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to fetch.
     * @returns The fetched forum topic.
     * @example docs.fetch('abc', 123);
     */
    fetch(channelId: string, forumTopicId: number): Promise<APIForumTopic>;
    /**
     * Fetch forum topics from Guilded.
     * @param channelId The ID of the channel the forum topics belong to.
     * @param options The options to fetch forum topics with.
     * @returns The fetched forum topics.
     * @example docs.fetchMany('abc');
     */
    fetch(channelId: string, options?: APIForumTopicFetchManyOptions): Promise<APIForumTopicSummary[]>;
    /** @ignore */
    private fetchSingle;
    /** @ignore */
    private fetchMany;
    /**
     * Create a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param payload The payload of the forum topic.
     * @returns The created forum topic.
     * @example topics.create('abc', { title: 'My Topic!' });
     */
    create(channelId: string, payload: APIForumTopicPayload): Promise<APIForumTopic>;
    /**
     * Edit a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to edit.
     * @param payload The payload of the forum topic.
     * @returns The edited forum topic.
     * @example topics.edit('abc', 123, { title: 'New Title', content: 'New Content' });
     */
    edit(channelId: string, forumTopicId: number, payload: APIForumTopicEditPayload): Promise<APIForumTopic>;
    /**
     * Delete a forum topic from Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to delete.
     * @example topics.delete('abc', 123);
     */
    delete(channelId: string, forumTopicId: number): Promise<void>;
    /**
     * Pin a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to pin.
     * @example topics.pin('abc', 123);
     */
    pin(channelId: string, forumTopicId: number): Promise<void>;
    /**
     * Unpin a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to unpin.
     * @example topics.unpin('abc', 123);
     */
    unpin(channelId: string, forumTopicId: number): Promise<void>;
    /**
     * Lock a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to lock.
     * @example topics.lock('abc', 123);
     */
    lock(channelId: string, forumTopicId: number): Promise<void>;
    /**
     * Unlock a forum topic on Guilded.
     * @param channelId The ID of the channel the forum topic belongs to.
     * @param forumTopicId The ID of the forum topic to unlock.
     * @example topics.unlock('abc', 123);
     */
    unlock(channelId: string, forumTopicId: number): Promise<void>;
}
//# sourceMappingURL=ForumTopicRouter.d.ts.map