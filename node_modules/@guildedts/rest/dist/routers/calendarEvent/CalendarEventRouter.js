"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarEventRouter = void 0;
const guilded_api_typings_1 = require("guilded-api-typings");
const BaseRouter_1 = require("../BaseRouter");
/**
 * The calendar event router for the Guilded REST API.
 * @example new CalendarEventRouter(rest);
 */
class CalendarEventRouter extends BaseRouter_1.BaseRouter {
    /** @ignore */
    fetch(channelId, calendarEventIdOrOptions) {
        if (typeof calendarEventIdOrOptions === 'number')
            return this.fetchSingle(channelId, calendarEventIdOrOptions);
        return this.fetchMany(channelId, calendarEventIdOrOptions);
    }
    /** @ignore */
    async fetchSingle(channelId, calendarEventId) {
        const { calendarEvent } = await this.rest.get(guilded_api_typings_1.Routes.calendarEvent(channelId, calendarEventId));
        return calendarEvent;
    }
    /** @ignore */
    async fetchMany(channelId, options) {
        const { calendarEvents } = await this.rest.get(guilded_api_typings_1.Routes.calendarEvents(channelId), options);
        return calendarEvents;
    }
    /**
     * Create a calendar event on Guilded.
     * @param channelId The ID of the channel the calendar event belongs to.
     * @param payload The payload of the calendar event.
     * @returns The created calendar event.
     * @example calendarEvents.create('abc', { name: 'Event!' });
     */
    async create(channelId, payload) {
        const { calendarEvent } = await this.rest.post(guilded_api_typings_1.Routes.calendarEvents(channelId), payload);
        return calendarEvent;
    }
    /**
     * Edit a calendar event on Guilded.
     * @param channelId The ID of the channel the calendar event belongs to.
     * @param calendarEventId The ID of the calendar event to edit.
     * @param payload The payload of the calendar event.
     * @returns The edited calendar event.
     * @example calendarEvents.edit('abc', 123, { name: 'Event!' });
     */
    async edit(channelId, calendarEventId, payload) {
        const { calendarEvent } = await this.rest.patch(guilded_api_typings_1.Routes.calendarEvent(channelId, calendarEventId), payload);
        return calendarEvent;
    }
    /**
     * Delete a calendar event from Guilded.
     * @param channelId The ID of the channel the calendar event belongs to.
     * @param calendarEventId The ID of the calendar event to delete.
     * @example calendarEvents.delete('abc', 123);
     */
    delete(channelId, calendarEventId) {
        return this.rest.delete(guilded_api_typings_1.Routes.calendarEvent(channelId, calendarEventId));
    }
}
exports.CalendarEventRouter = CalendarEventRouter;
//# sourceMappingURL=CalendarEventRouter.js.map