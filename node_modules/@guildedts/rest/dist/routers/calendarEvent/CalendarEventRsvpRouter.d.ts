import { APICalendarEventRsvp, CalendarEventRsvpStatus } from 'guilded-api-typings';
import { BaseRouter } from '../BaseRouter';
/**
 * The calendar event RSVP router for the Guilded REST API.
 * @example new CalendarEventRsvpRouter(rest);
 */
export declare class CalendarEventRsvpRouter extends BaseRouter {
    /**
     * Fetch a calendar event RSVP from Guilded.
     * @param channelId The ID of the channel the calendar event RSVP belongs to.
     * @param calendarEventId The ID of the calendar event the RSVP belongs to.
     * @param userId The ID of the user the RSVP belongs to.
     * @returns The fetched calendar event RSVP.
     * @example calendarEvents.fetch('abc', 123, 'abc');
     */
    fetch(channelId: string, calendarEventId: number, userId: string): Promise<APICalendarEventRsvp>;
    /**
     * Fetch calendar event RSVPs from Guilded.
     * @param channelId The ID of the channel the calendar event RSVPs belong to.
     * @param calendarEventId The ID of the calendar event the RSVPs belong to.
     * @returns The fetched calendar event RSVPs.
     * @example calendarEvents.fetch('abc', 123);
     */
    fetch(channelId: string, calendarEventId: number): Promise<APICalendarEventRsvp[]>;
    /** @ignore */
    private fetchSingle;
    /** @ignore */
    private fetchMany;
    /**
     * Edit a calendar event RSVP on Guilded.
     * @param channelId The ID of the channel the calendar event RSVP belongs to.
     * @param calendarEventId The ID of the calendar event the RSVP belongs to.
     * @param userId The ID of the user the RSVP belongs to.
     * @param status The status of the RSVP.
     * @returns The edited calendar event RSVP.
     * @example calendarEventRsvps.edit('abc', 123, 'abc', 'going');
     */
    edit(channelId: string, calendarEventId: number, userId: string, status: CalendarEventRsvpStatus): Promise<APICalendarEventRsvp>;
    /**
     * Delete a calendar event RSVP from Guilded.
     * @param channelId The ID of the channel the calendar event RSVP belongs to.
     * @param calendarEventId The ID of the calendar event the RSVP belongs to.
     * @param userId The ID of the user the RSVP belongs to.
     * @example calendarEventRsvps.delete('abc', 123, 'abc');
     */
    delete(channelId: string, calendarEventId: number, userId: string): Promise<void>;
}
//# sourceMappingURL=CalendarEventRsvpRouter.d.ts.map