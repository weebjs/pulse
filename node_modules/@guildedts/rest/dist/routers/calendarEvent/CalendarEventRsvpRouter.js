"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CalendarEventRsvpRouter = void 0;
const guilded_api_typings_1 = require("guilded-api-typings");
const BaseRouter_1 = require("../BaseRouter");
/**
 * The calendar event RSVP router for the Guilded REST API.
 * @example new CalendarEventRsvpRouter(rest);
 */
class CalendarEventRsvpRouter extends BaseRouter_1.BaseRouter {
    /** @ignore */
    fetch(channelId, calendarEventId, userId) {
        if (userId)
            return this.fetchSingle(channelId, calendarEventId, userId);
        return this.fetchMany(channelId, calendarEventId);
    }
    /** @ignore */
    async fetchSingle(channelId, calendarEventId, userId) {
        const { calendarEventRsvp } = await this.rest.get(guilded_api_typings_1.Routes.calendarEventRsvp(channelId, calendarEventId, userId));
        return calendarEventRsvp;
    }
    /** @ignore */
    async fetchMany(channelId, calendarEventId) {
        const { calendarEventRsvps } = await this.rest.get(guilded_api_typings_1.Routes.calendarEventRsvps(channelId, calendarEventId));
        return calendarEventRsvps;
    }
    /**
     * Edit a calendar event RSVP on Guilded.
     * @param channelId The ID of the channel the calendar event RSVP belongs to.
     * @param calendarEventId The ID of the calendar event the RSVP belongs to.
     * @param userId The ID of the user the RSVP belongs to.
     * @param status The status of the RSVP.
     * @returns The edited calendar event RSVP.
     * @example calendarEventRsvps.edit('abc', 123, 'abc', 'going');
     */
    async edit(channelId, calendarEventId, userId, status) {
        const { calendarEventRsvp } = await this.rest.put(guilded_api_typings_1.Routes.calendarEventRsvp(channelId, calendarEventId, userId), { status });
        return calendarEventRsvp;
    }
    /**
     * Delete a calendar event RSVP from Guilded.
     * @param channelId The ID of the channel the calendar event RSVP belongs to.
     * @param calendarEventId The ID of the calendar event the RSVP belongs to.
     * @param userId The ID of the user the RSVP belongs to.
     * @example calendarEventRsvps.delete('abc', 123, 'abc');
     */
    delete(channelId, calendarEventId, userId) {
        return this.rest.delete(guilded_api_typings_1.Routes.calendarEventRsvp(channelId, calendarEventId, userId));
    }
}
exports.CalendarEventRsvpRouter = CalendarEventRsvpRouter;
//# sourceMappingURL=CalendarEventRsvpRouter.js.map