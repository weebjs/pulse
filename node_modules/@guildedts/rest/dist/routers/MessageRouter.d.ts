import { APIMessageFetchManyOptions, APIMessage, APIMessagePayloadResolvable, APIMessageEditPayloadResolvable } from 'guilded-api-typings';
import { BaseRouter } from './BaseRouter';
/**
 * The message router for the Guilded REST API.
 * @example new MessageRouter(rest);
 */
export declare class MessageRouter extends BaseRouter {
    /**
     * Fetch a message from Guilded.
     * @param channelId The ID of the channel the message belongs to.
     * @param messageId The ID of the message to fetch.
     * @returns The fetched message.
     * @example messages.fetch('abc', 'abc');
     */
    fetch(channelId: string, messageId: string): Promise<APIMessage>;
    /**
     * Fetch messages from Guilded.
     * @param channelId The ID of the channel the messages belong to.
     * @param options The options to fetch messages with.
     * @returns The fetched messages.
     * @example messages.fetch('abc');
     */
    fetch(channelId: string, options?: APIMessageFetchManyOptions): Promise<APIMessage[]>;
    /** @ignore */
    private fetchSingle;
    /** @ignore */
    private fetchMany;
    /**
     * Create a message on Guilded.
     * @param channelId The ID of the channel the message belongs to.
     * @param payload The payload of the message.
     * @returns The created message.
     * @example messages.create('abc', 'Hello world!');
     */
    create(channelId: string, payload: APIMessagePayloadResolvable): Promise<APIMessage>;
    /**
     * Edit a message on Guilded.
     * @param channelId The ID of the channel the message belongs to.
     * @param messageId The ID of the message to edit.
     * @param payload The payload of the message.
     * @returns The edited message.
     * @example messages.edit('abc', 'abc', 'Hello world!');
     */
    edit(channelId: string, messageId: string, payload: APIMessageEditPayloadResolvable): Promise<APIMessage>;
    /**
     * Delete a message from Guilded.
     * @param channelId The ID of the channel the message belongs to.
     * @param messageId The ID of the message to delete.
     * @example messages.delete('abc', 'abc');
     */
    delete(channelId: string, messageId: string): Promise<void>;
}
//# sourceMappingURL=MessageRouter.d.ts.map