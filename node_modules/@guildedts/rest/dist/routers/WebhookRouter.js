"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebhookRouter = void 0;
const guilded_api_typings_1 = require("guilded-api-typings");
const BaseRouter_1 = require("./BaseRouter");
const node_fetch_1 = __importDefault(require("node-fetch"));
/**
 * The webhook router for the Guilded REST API.
 * @example new WebhookRouter(rest);
 */
class WebhookRouter extends BaseRouter_1.BaseRouter {
    /**
     * Fetch a webhook from Guilded.
     * @param serverId The ID of the server the webhook belongs to.
     * @param webhookId The ID of the webhook to fetch.
     * @returns The fetched webhook.
     * @example webhooks.fetchSingle('abc', 'abc');
     */
    async fetchSingle(serverId, webhookId) {
        const { webhook } = await this.rest.get(guilded_api_typings_1.Routes.webhook(serverId, webhookId));
        return webhook;
    }
    /**
     * Fetch webhooks from Guilded.
     * @param serverId The ID of the server the webhooks belong to.
     * @param channelId The ID of the channel to fetch webhooks from.
     * @returns The fetched webhooks.
     * @example webhooks.fetchMany('abc', 'abc');
     */
    async fetchMany(serverId, channelId) {
        const { webhooks } = await this.rest.get(guilded_api_typings_1.Routes.webhooks(serverId), { channelId });
        return webhooks;
    }
    /**
     * Create a webhook message on Guilded.
     * @param webhookId The ID of the webhook.
     * @param webhookToken The token of the webhook.
     * @param payload The payload of the message.
     * @example webhooks.send('abc', 'abc', 'Hello world!');
     */
    async send(webhookId, webhookToken, payload) {
        await (0, node_fetch_1.default)(`https://media.guilded.gg${guilded_api_typings_1.Routes.webhookExecute(webhookId, webhookToken)}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(typeof payload === 'string'
                ? { content: payload }
                : Array.isArray(payload)
                    ? { embeds: payload }
                    : payload),
        });
    }
    /**
     * Create a webhook on Guilded.
     * @param serverId The ID of the server the webhook belongs to.
     * @param channelId The ID of the channel the webhook belongs to.
     * @param name The name of the webhook.
     * @returns The created webhook.
     * @example webhooks.create('abc', 'abc', 'Webhook');
     */
    async create(serverId, channelId, name) {
        const { webhook } = await this.rest.post(guilded_api_typings_1.Routes.webhooks(serverId), { channelId, name });
        return webhook;
    }
    /**
     * Edit a webhook on Guilded.
     * @param serverId The ID of the server the webhook belongs to.
     * @param webhookId The ID of the webhook to edit.
     * @param name The name of the webhook.
     * @param channelId The ID of the channel the webhook belongs to.
     * @returns The edited webhook.
     * @example webhooks.edit('abc', 'abc', 'Webhook');
     */
    async edit(serverId, webhookId, name, channelId) {
        const { webhook } = await this.rest.put(guilded_api_typings_1.Routes.webhook(serverId, webhookId), { channelId, name });
        return webhook;
    }
    /**
     * Delete a webhook from Guilded.
     * @param serverId The ID of the server the webhook belongs to.
     * @param webhookId The ID of the webhook to delete.
     * @example webhooks.delete('abc', 'abc');
     */
    delete(serverId, webhookId) {
        return this.rest.delete(guilded_api_typings_1.Routes.webhook(serverId, webhookId));
    }
}
exports.WebhookRouter = WebhookRouter;
//# sourceMappingURL=WebhookRouter.js.map