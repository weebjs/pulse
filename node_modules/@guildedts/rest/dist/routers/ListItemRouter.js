"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListItemRouter = void 0;
const guilded_api_typings_1 = require("guilded-api-typings");
const BaseRouter_1 = require("./BaseRouter");
/**
 * The list item router for the Guilded REST API.
 * @example new ListItemRouter(rest);
 */
class ListItemRouter extends BaseRouter_1.BaseRouter {
    /** @ignore */
    fetch(channelId, listItemId) {
        if (listItemId)
            return this.fetchSingle(channelId, listItemId);
        return this.fetchMany(channelId);
    }
    /** @ignore */
    async fetchSingle(channelId, listItemId) {
        const { listItem } = await this.rest.get(guilded_api_typings_1.Routes.listItem(channelId, listItemId));
        return listItem;
    }
    /** @ignore */
    async fetchMany(channelId) {
        const { listItems } = await this.rest.get(guilded_api_typings_1.Routes.listItems(channelId));
        return listItems;
    }
    /**
     * Create a list item on Guilded.
     * @param channelId The ID of the channel the list item belongs to.
     * @param message The message of the list item.
     * @param note The note of the list item.
     * @returns The created list item.
     * @example listItems.create('abc', 'Random item');
     */
    async create(channelId, message, note) {
        const { listItem } = await this.rest.post(guilded_api_typings_1.Routes.listItems(channelId), { message, note: note ? { content: note } : undefined });
        return listItem;
    }
    /**
     * Edit a list item on Guilded.
     * @param channelId The ID of the channel the list item belongs to.
     * @param listItemId The ID of the list item to edit.
     * @param message The message of theb list item.
     * @param note The note of the list item.
     * @returns The edited list item.
     * @example listItems.edit('abc', 'abc', 'Random item');
     */
    async edit(channelId, listItemId, message, note) {
        const { listItem } = await this.rest.put(guilded_api_typings_1.Routes.listItem(channelId, listItemId), { message, note: note ? { content: note } : undefined });
        return listItem;
    }
    /**
     * Delete a list item from Guilded.
     * @param channelId The ID of the channel the list item belongs to.
     * @param listItemId The ID of the list item to delete.
     * @example listItems.delete('abc', 'abc');
     */
    delete(channelId, listItemId) {
        return this.rest.post(guilded_api_typings_1.Routes.listItem(channelId, listItemId));
    }
    /**
     * Complete a list item on Guilded.
     * @param channelId The ID of the channel the list item belongs to.
     * @param listItemId The ID of the list item to complete.
     * @example listItems.complete('abc', 'abc');
     */
    complete(channelId, listItemId) {
        return this.rest.put(guilded_api_typings_1.Routes.listItemComplete(channelId, listItemId));
    }
    /**
     * Uncomplete a list item on Guilded.
     * @param channelId The ID of the channel the list item belongs to.
     * @param listItemId The ID of the list item to uncomplete.
     * @example listItems.uncomplete('abc', 'abc');
     */
    uncomplete(channelId, listItemId) {
        return this.rest.delete(guilded_api_typings_1.Routes.listItemComplete(channelId, listItemId));
    }
}
exports.ListItemRouter = ListItemRouter;
//# sourceMappingURL=ListItemRouter.js.map