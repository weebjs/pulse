"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MessageRouter = void 0;
const guilded_api_typings_1 = require("guilded-api-typings");
const BaseRouter_1 = require("./BaseRouter");
/**
 * The message router for the Guilded REST API.
 * @example new MessageRouter(rest);
 */
class MessageRouter extends BaseRouter_1.BaseRouter {
    /** @ignore */
    fetch(channelId, messageIdOrOptions) {
        if (typeof messageIdOrOptions === 'string')
            return this.fetchSingle(channelId, messageIdOrOptions);
        return this.fetchMany(channelId, messageIdOrOptions);
    }
    /** @ignore */
    async fetchSingle(channelId, messageId) {
        const { message } = await this.rest.get(guilded_api_typings_1.Routes.message(channelId, messageId));
        return message;
    }
    /** @ignore */
    async fetchMany(channelId, options) {
        const { messages } = await this.rest.get(guilded_api_typings_1.Routes.messages(channelId), options);
        return messages;
    }
    /**
     * Create a message on Guilded.
     * @param channelId The ID of the channel the message belongs to.
     * @param payload The payload of the message.
     * @returns The created message.
     * @example messages.create('abc', 'Hello world!');
     */
    async create(channelId, payload) {
        const { message } = await this.rest.post(guilded_api_typings_1.Routes.messages(channelId), typeof payload === 'string'
            ? { content: payload }
            : Array.isArray(payload)
                ? { embeds: payload }
                : payload);
        return message;
    }
    /**
     * Edit a message on Guilded.
     * @param channelId The ID of the channel the message belongs to.
     * @param messageId The ID of the message to edit.
     * @param payload The payload of the message.
     * @returns The edited message.
     * @example messages.edit('abc', 'abc', 'Hello world!');
     */
    async edit(channelId, messageId, payload) {
        const { message } = await this.rest.put(guilded_api_typings_1.Routes.message(channelId, messageId), typeof payload === 'string'
            ? { content: payload }
            : Array.isArray(payload)
                ? { embeds: payload }
                : payload);
        return message;
    }
    /**
     * Delete a message from Guilded.
     * @param channelId The ID of the channel the message belongs to.
     * @param messageId The ID of the message to delete.
     * @example messages.delete('abc', 'abc');
     */
    delete(channelId, messageId) {
        return this.rest.delete(guilded_api_typings_1.Routes.message(channelId, messageId));
    }
}
exports.MessageRouter = MessageRouter;
//# sourceMappingURL=MessageRouter.js.map