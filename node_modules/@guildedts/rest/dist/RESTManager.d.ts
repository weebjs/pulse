/// <reference types="node" />
import { Response } from 'node-fetch';
import { Router } from './routers/Router';
import EventEmitter from 'events';
/**
 * The REST manager for the Guilded API.
 * @example new RESTManager({ version: 1, token: 'token' });
 */
export declare class RESTManager extends EventEmitter {
    readonly options: RESTOptions;
    /** The auth token for the REST API. */
    token?: string;
    /** The version of the REST API. */
    readonly version?: number;
    /** The proxy url of the REST API. */
    readonly proxyUrl?: string;
    /** The router for the REST API. */
    readonly router: Router;
    /** @param options The options for the REST manager. */
    constructor(options: RESTOptions);
    /** The base URL for the REST API. */
    get baseURL(): string;
    /**
     * Set the auth token for the REST API.
     * @param token The auth token.
     * @returns The REST manager.
     * @example rest.setToken('token');
     */
    setToken(token?: string): this;
    /**
     * Make a request to the REST API.
     * @param path The path to the resource.
     * @param method The HTTP method.
     * @param options The options for the request.
     * @param retries The number of retries.
     * @returns The response from the REST API.
     * @example rest.request('/channels/abc', 'GET');
     */
    fetch<R = any, B = any, P extends Record<string, any> = Record<string, any>>(path: string, method: string, options?: FetchOptions<B, P>, retries?: number): Promise<R>;
    /**
     * Make a GET request to the REST API.
     * @param path The path to the resource.
     * @param params The query parameters for the request.
     * @returns The response from the REST API.
     * @example rest.get('/channels/abc');
     */
    get<R = any, P extends Record<string, any> = Record<string, any>>(path: string, params?: P): Promise<R>;
    /**
     * Make a POST request to the REST API.
     * @param path The path to the resource.
     * @param body The body for the request.
     * @returns The response from the REST API.
     * @example rest.post('/channels', { name: 'Chat', type: 'chat' });
     */
    post<R = any, B = any>(path: string, body?: B): Promise<R>;
    /**
     * Make a PATCH request to the REST API.
     * @param path The path to the resource.
     * @param body The body for the request.
     * @returns The response from the REST API.
     * @example rest.patch('/channels/abc', { name: 'Chat' });
     */
    patch<R = any, B = any>(path: string, body?: B): Promise<R>;
    /**
     * Make a PUT request to the REST API.
     * @param path The path to the resource.
     * @param body The body for the request.
     * @returns The response from the REST API.
     * @example rest.put('/channels/abc/messages/abc', { content: 'Hello world!' });
     */
    put<R = any, B = any>(path: string, body?: B): Promise<R>;
    /**
     * Make a DELETE request to the REST API.
     * @param path The path for the resource.
     * @returns The response from the REST API.
     * @example rest.delete('/channels/abc');
     */
    delete<R>(path: string): Promise<R>;
}
export interface RESTManager {
    /** @ignore */
    on<Event extends keyof RESTManagerEvents>(event: Event, listener: (...args: RESTManagerEvents[Event]) => any): this;
    /** @ignore */
    once<Event extends keyof RESTManagerEvents>(event: Event, listener: (...args: RESTManagerEvents[Event]) => any): this;
    /** @ignore */
    off<Event extends keyof RESTManagerEvents>(event: Event, listener: (...args: RESTManagerEvents[Event]) => any): this;
    /** @ignore */
    emit<Event extends keyof RESTManagerEvents>(event: Event, ...args: RESTManagerEvents[Event]): boolean;
}
/** The REST manager events. */
export interface RESTManagerEvents {
    /** Emitted when data is received. */
    raw: [data: any, response: Response];
}
/** The options for the REST manager. */
export interface RESTOptions {
    /** The auth token for the REST API. */
    token?: string;
    /** The version of the REST API. */
    version?: number;
    /** The proxy URL of the REST API. */
    proxyUrl?: string;
    /** The interval to wait between retries. */
    retryInterval?: number;
    /** The maximum number of retry attempts. */
    maxRetries?: number;
}
/** The options for making a request to the REST API. */
export interface FetchOptions<B = any, P extends Record<string, any> = Record<string, any>> {
    /** The query parameters of the request. */
    params?: P;
    /** The body of the request. */
    body?: B;
}
//# sourceMappingURL=RESTManager.d.ts.map