"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RESTManager = void 0;
const _1 = require(".");
const node_fetch_1 = __importDefault(require("node-fetch"));
const Router_1 = require("./routers/Router");
const events_1 = __importDefault(require("events"));
const { version } = require('../package.json');
/**
 * The REST manager for the Guilded API.
 * @example new RESTManager({ version: 1, token: 'token' });
 */
class RESTManager extends events_1.default {
    options;
    /** The auth token for the REST API. */
    token;
    /** The version of the REST API. */
    version;
    /** The proxy url of the REST API. */
    proxyUrl;
    /** The router for the REST API. */
    router;
    /** @param options The options for the REST manager. */
    constructor(options) {
        super();
        this.options = options;
        this.token = options.token;
        this.proxyUrl = options.proxyUrl;
        if (!this.proxyUrl)
            this.version = options.version;
        this.router = new Router_1.Router(this);
    }
    /** The base URL for the REST API. */
    get baseURL() {
        return this.proxyUrl ? this.proxyUrl : `https://www.guilded.gg/api/v${this.version}/`;
    }
    /**
     * Set the auth token for the REST API.
     * @param token The auth token.
     * @returns The REST manager.
     * @example rest.setToken('token');
     */
    setToken(token) {
        this.token = token;
        return this;
    }
    /**
     * Make a request to the REST API.
     * @param path The path to the resource.
     * @param method The HTTP method.
     * @param options The options for the request.
     * @param retries The number of retries.
     * @returns The response from the REST API.
     * @example rest.request('/channels/abc', 'GET');
     */
    async fetch(path, method, options = {}, retries = 0) {
        const searchParams = new URLSearchParams();
        if (options.params)
            for (const [key, value] of Object.entries(options.params))
                searchParams.append(key, value instanceof Date ? value.toISOString() : String(value));
        const response = await (0, node_fetch_1.default)(`${this.baseURL}${path}${searchParams ? `?${searchParams}` : ''}`, {
            method,
            headers: {
                'Content-Type': 'application/json',
                ...(this.token ? { Authorization: `Bearer ${this.token}` } : {}),
                'User-Agent': `@guildedts/rest@${version} Node.JS@${process.versions.node}`,
            },
            body: options.body ? JSON.stringify(options.body) : undefined,
        });
        const data = (await response.json().catch(() => undefined));
        if (response.ok) {
            this.emit('raw', data, response);
            return data;
        }
        if (response.status === 429 && retries <= (this.options?.maxRetries ?? 3)) {
            const retryAfter = Number(response.headers.get('Retry-After')) ??
                this.options.retryInterval ??
                30000 / 1000;
            await new Promise((resolve) => setTimeout(resolve, retryAfter * 1000));
            return this.fetch(path, method, options, retries++);
        }
        const error = data;
        throw new _1.GuildedAPIError(error.code, error.message, response.status, method, path, options.body, error.meta);
    }
    /**
     * Make a GET request to the REST API.
     * @param path The path to the resource.
     * @param params The query parameters for the request.
     * @returns The response from the REST API.
     * @example rest.get('/channels/abc');
     */
    get(path, params) {
        return this.fetch(path, 'GET', { params });
    }
    /**
     * Make a POST request to the REST API.
     * @param path The path to the resource.
     * @param body The body for the request.
     * @returns The response from the REST API.
     * @example rest.post('/channels', { name: 'Chat', type: 'chat' });
     */
    post(path, body) {
        return this.fetch(path, 'POST', { body });
    }
    /**
     * Make a PATCH request to the REST API.
     * @param path The path to the resource.
     * @param body The body for the request.
     * @returns The response from the REST API.
     * @example rest.patch('/channels/abc', { name: 'Chat' });
     */
    patch(path, body) {
        return this.fetch(path, 'PATCH', { body });
    }
    /**
     * Make a PUT request to the REST API.
     * @param path The path to the resource.
     * @param body The body for the request.
     * @returns The response from the REST API.
     * @example rest.put('/channels/abc/messages/abc', { content: 'Hello world!' });
     */
    put(path, body) {
        return this.fetch(path, 'PUT', { body });
    }
    /**
     * Make a DELETE request to the REST API.
     * @param path The path for the resource.
     * @returns The response from the REST API.
     * @example rest.delete('/channels/abc');
     */
    delete(path) {
        return this.fetch(path, 'DELETE');
    }
}
exports.RESTManager = RESTManager;
//# sourceMappingURL=RESTManager.js.map