"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.userMention = exports.h2 = exports.h1 = exports.divider = exports.inlineCode = exports.strikeThrough = exports.underline = exports.spoiler = exports.italic = exports.bold = void 0;
__exportStar(require("./Embed"), exports);
__exportStar(require("@guildedts/util"), exports);
/**
 * Create bold text.
 * @param text The text to be formatted.
 * @returns The formatted text.
 * @example bold('bold text'); // '**bold text**'
 */
const bold = (text) => `**${text}**`;
exports.bold = bold;
/**
 * Create italic text.
 * @param text The text to be formatted.
 * @returns The formatted text.
 * @example italic('italic text'); // '*italic text*'
 */
const italic = (text) => `*${text}*`;
exports.italic = italic;
/**
 * Create a spoiler.
 * @param text The text to be formatted.
 * @returns The formatted text.
 * @example spoiler('spoiler text'); // '||spoiler text||'
 */
const spoiler = (text) => `||${text}||`;
exports.spoiler = spoiler;
/**
 * Underline text.
 * @param text The text to be formatted.
 * @returns The formatted text.
 * @example underline('underlined text'); // '__underlined text__'
 */
const underline = (text) => `__${text}__`;
exports.underline = underline;
/**
 * Strikethrough text.
 * @param text The text to be formatted.
 * @returns The formatted text.
 * @example strikethrough('strikethrough text'); // '~~strikethrough text~~'
 */
const strikeThrough = (text) => `~~${text}~~`;
exports.strikeThrough = strikeThrough;
/**
 * Create inline code.
 * @param text The text to be formatted.
 * @returns The formatted text.
 * @example inlineCode('inline code'); // '`inline code`'
 */
const inlineCode = (text) => `\`${text}\``;
exports.inlineCode = inlineCode;
/**
 * Create a divider
 * @param newLine Whether to create a new line.
 * @returns The formatted text.
 * @example
 * // Create a divider
 * divider(); // '---'
 * // Create a divider with a new line
 * divider(true); // '\n---\n'
 */
const divider = (newLine = false) => (newLine ? '\n---\n' : '---');
exports.divider = divider;
/**
 * Create a big heading.
 * @param text The text to be formatted.
 * @returns The formatted text.
 * @example h1('big heading'); // '# big heading'
 */
const h1 = (text) => `# ${text}`;
exports.h1 = h1;
/**
 * Create a medium heading.
 * @param text The text to be formatted.
 * @returns The formatted text.
 * @example h2('medium heading'); // '## medium heading'
 */
const h2 = (text) => `## ${text}`;
exports.h2 = h2;
/**
 * Create a user mention.
 * @param userId The ID of the user to mention.
 * @returns The formatted text.
 * @example userMention('abc'); // '<@abc>'
 */
const userMention = (userId) => `<@${userId}>`;
exports.userMention = userMention;
//# sourceMappingURL=index.js.map