/// <reference types="node" />
import Websocket from 'ws';
import EventEmitter from 'events';
import { APIClientUser, WSEvents, WSMessagePayload } from 'guilded-api-typings';
/**
 * The Websocket manager for the Guilded API.
 * @example new WebsocketManager({ version: 1, token: 'token' });
 */
export declare class WebsocketManager extends EventEmitter {
    readonly options: WebsocketOptions;
    /** The auth token for the websocket. */
    token?: string;
    /** The version of the Websocket API. */
    readonly version?: number;
    /** The proxy URL of the Websocket API. */
    readonly proxyUrl?: string;
    /** The websocket. */
    socket?: Websocket;
    /** The date the websocket is ready. */
    readyAt?: Date;
    /** The ping of the websocket connection. */
    ping?: number;
    /** The date the websocket was pinged. */
    pingedAt?: Date;
    /** The anount of times the websocket has been reconnected. */
    reconnects: number;
    /** The last message ID. */
    lastMessageId?: string;
    /** @param options The options for the Websocket manager. */
    constructor(options: WebsocketOptions);
    /** Whether the websocket is ready. */
    get isReady(): boolean;
    /** The timestamp of when the websocket is ready. */
    get readyTimestamp(): number | undefined;
    /** The timestamp the websocket was pinged. */
    get pingedTimestamp(): number | undefined;
    /** How long the websocket has been connected. */
    get uptime(): number | undefined;
    /** The URL of the Websocket. */
    get url(): string;
    /**
     * Connect to the Websocket API.
     * @param token The auth token.
     * @returns The Websocket manager.
     * @example ws.connect('token');
     */
    connect(token?: string): this;
    /**
     * Disconnect from the Websocket API.
     * @returns The websocket manager.
     * @example ws.disconnect();
     */
    disconnect(): this;
    /** @ignore */
    private onSocketDisconnect;
    /** @ignore */
    private onSocketMessage;
    /** @ignore */
    private onSocketPing;
    /** @ignore */
    private onSocketPong;
}
export interface WebsocketManager {
    /** @ignore */
    on<Event extends keyof WSManagerEvents>(event: Event, listener: (...args: WSManagerEvents[Event]) => any): this;
    /** @ignore */
    once<Event extends keyof WSManagerEvents>(event: Event, listener: (...args: WSManagerEvents[Event]) => any): this;
    /** @ignore */
    off<Event extends keyof WSManagerEvents>(event: Event, listener: (...args: WSManagerEvents[Event]) => any): this;
    /** @ignore */
    emit<Event extends keyof WSManagerEvents>(event: Event, ...args: WSManagerEvents[Event]): boolean;
}
/** The options for the Websocket manager. */
export interface WebsocketOptions {
    /** The auth token for the Websocket API. */
    token?: string;
    /** The version of the Websocket API. */
    version?: number;
    /** The proxy URL of the Websocket API. */
    proxyUrl?: string;
    /** The maximum number of reconnect attempts. */
    maxReconnects?: number;
    /** Whether to allow reconnects. */
    reconnect?: boolean;
}
/** The websocket manager events. */
export interface WSManagerEvents {
    /** Emitted when the Websocket is connected. */
    ready: [user: APIClientUser];
    /** Emitted when the Websocket is reconnected. */
    reconnect: [ws: WebsocketManager];
    /** Emitted when the Websocket is disconnected. */
    disconnect: [ws: WebsocketManager];
    /** Emitted when a message is received. */
    raw: [data: WSMessagePayload];
    /** Emitted when data is received from the Websocket API. */
    event: {
        [Event in keyof WSEvents]: [event: Event, data: WSEvents[Event]];
    }[keyof WSEvents];
}
//# sourceMappingURL=WebsocketManager.d.ts.map