import type { RESTPostChannelMessagesBody, RESTGetChannelMessagesQuery } from "@guildedjs/guilded-api-typings";
import { Message } from "../../structures/Message";
import { CacheableStructManager } from "./CacheableStructManager";
import { Collection } from "@discordjs/collection";
import type { Embed } from "../../structures/Embed";
import type { MessageContent } from "../../typings";
import { CollectorOptions } from "../../structures";
/**
 * Manager for handling caching and interactions for Messages
 */
export declare class GlobalMessageManager extends CacheableStructManager<string, Message> {
    /**
     * Whether or not messages should be cached.
     */
    get shouldCacheMessage(): boolean;
    /**
     * Fetches multiple messages from a channel.
     * @param channelId The ID of the channel to fetch messages from.
     * @param options Additional options for the fetch.
     * @returns A promise that resolves with a collection of messages.
     */
    fetchMany(channelId: string, options: RESTGetChannelMessagesQuery): Promise<Collection<string, Message>>;
    /**
     * Fetches a message from a channel.
     * @param channelId The ID of the channel to fetch the message from.
     * @param messageId The ID of the message to fetch.
     * @param force Whether or not to force the fetch.
     * @returns A promise that resolves with the requested message.
     */
    fetch(channelId: string, messageId: string, force?: boolean): Promise<Message>;
    /**
     * Sends a message to a channel.
     * @param channelId The ID of the channel to send the message to.
     * @param content The content of the message.
     * @returns A promise that resolves with the created message.
     */
    send(channelId: string, content: MessageContent): Promise<Message>;
    /**
     * Adds a reaction to a message.
     * @param channelId The ID of the channel containing the message.
     * @param contentId The ID of the message to add a reaction to.
     * @param emoteId The ID of the emote to add as a reaction.
     * @returns A promise that resolves to nothing when the reaction is added.
     */
    addReaction(channelId: string, contentId: string, emoteId: number): Promise<void>;
    /**
     * Deletes a reaction from a message.
     * @param channelId The ID of the channel containing the message.
     * @param contentId The ID of the message to delete the reaction from.
     * @param emoteId The ID of the emote to delete as a reaction.
     * @returns A promise that resolves to nothing when the reaction is deleted.
     */
    deleteReaction(channelId: string, contentId: string, emoteId: number): Promise<void>;
    /**
     * Updates a message in a channel.
     * @param channelId The ID of the channel containing the message.
     * @param messageId The ID of the message to update.
     * @param content The new content of the message.
     * @returns A promise that resolves with the updated message.
     */
    update(channelId: string, messageId: string, content: RESTPostChannelMessagesBody | Embed | string): Promise<Message>;
    /** Delete a channel message. */
    delete(channelId: string, messageId: string): Promise<void>;
    awaitMessages(channelId: string, options: CollectorOptions<Message>): Promise<{
        reason: import("../../structures").CollectorEndReasons;
        entries: Collection<string, Message>;
    }>;
}
//# sourceMappingURL=MessageManager.d.ts.map