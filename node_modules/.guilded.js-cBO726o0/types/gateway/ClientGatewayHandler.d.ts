import type { Client } from "../structures/Client";
import { MessageEventHandler } from "./handler/MessageEventHandler";
import { ServerEventHandler } from "./handler/ServerEventHandler";
import { ServerMemberEventHandler } from "./handler/ServerMemberEventHandler";
import type { SkeletonWSPayload, WSEvent } from "@guildedjs/guilded-api-typings";
import { ServerWebhookEventHandler } from "./handler/ServerWebhookEventHandler";
import { ListEventHandler } from "./handler/ListEventHandler";
import { ServerChannelEventHandler } from "./handler/ServerChannelEventHandler";
import { DocEventHandler } from "./handler/DocEventHandler";
import { ReactionEventHandler } from "./handler/ReactionEventHandler";
import { CalendarEventHandler, CalendarEventRsvpHandler } from "./handler/CalendarEventHandler";
import { ForumEventHandler } from "./handler/ForumEventHandler";
import { BotEventHandler } from "./handler/BotEventHandler";
export declare class ClientGatewayHandler {
    readonly client: Client;
    calendarEventHandler: CalendarEventHandler;
    calendarEventRsvpHandler: CalendarEventRsvpHandler;
    messageHandler: MessageEventHandler;
    ServerHandler: ServerEventHandler;
    ServerMemberHandler: ServerMemberEventHandler;
    ServerWebhookHandler: ServerWebhookEventHandler;
    listHandler: ListEventHandler;
    ServerChannelHandler: ServerChannelEventHandler;
    docHandler: DocEventHandler;
    reactionHandler: ReactionEventHandler;
    forumHandler: ForumEventHandler;
    botHandler: BotEventHandler;
    readonly eventToHandlerMap: Record<keyof WSEvent, (data: SkeletonWSPayload) => boolean | Promise<boolean>>;
    constructor(client: Client);
    handleWSMessage(event: keyof WSEvent, data: SkeletonWSPayload): void;
}
//# sourceMappingURL=ClientGatewayHandler.d.ts.map