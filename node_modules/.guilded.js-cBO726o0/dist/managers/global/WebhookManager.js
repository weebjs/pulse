"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalWebhookManager = void 0;
const collection_1 = require("@discordjs/collection");
const Webhook_1 = require("../../structures/Webhook");
const CacheableStructManager_1 = require("./CacheableStructManager");
/**
 * A manager for interacting with global webhooks. You can retrieve webhooks from the .cache property
 * @extends CacheableStructManager
 */
class GlobalWebhookManager extends CacheableStructManager_1.CacheableStructManager {
    get shouldCacheWebhook() {
        var _a;
        return ((_a = this.client.options.cache) === null || _a === void 0 ? void 0 : _a.cacheWebhooks) !== false;
    }
    /**
     * Create a webhook
     * @param serverId The ID of the server to create the webhook for
     * @param options The options for creating the webhook
     * @returns A Promise that resolves to the created webhook
     */
    create(serverId, options) {
        return this.client.rest.router
            .createWebhook(serverId, options)
            .then((data) => {
            // This is in the case of which the WS gateway beats us to adding the message to the cache. If they haven't, then we do it ourselves.
            const existingWebhook = this.client.webhooks.cache.get(data.webhook.id);
            if (existingWebhook)
                return existingWebhook;
            const newWebhook = new Webhook_1.Webhook(this.client, data.webhook);
            if (this.shouldCacheWebhook)
                this.cache.set(newWebhook.id, newWebhook);
            return newWebhook;
        });
    }
    /**
     * Get a server's webhooks
     * @param serverId The ID of the server to get webhooks for
     * @param channelId The ID of the channel to get webhooks for
     * @returns A Promise that resolves to a Collection of Webhooks
     */
    fetchMany(serverId, channelId) {
        return this.client.rest.router
            .getWebhooks(serverId, channelId)
            .then((data) => {
            const webhooks = new collection_1.Collection();
            for (const webhook of data.webhooks) {
                const newWebhook = new Webhook_1.Webhook(this.client, webhook);
                webhooks.set(newWebhook.id, newWebhook);
                if (this.shouldCacheWebhook)
                    this.cache.set(newWebhook.id, newWebhook);
            }
            return webhooks;
        });
    }
    /**
     * Get a webhook
     * @param serverId The ID of the server the webhook is in
     * @param webhookId The ID of the webhook
     * @param force Whether to skip the cache check and request the API
     * @returns A Promise that resolves to the fetched webhook
     */
    fetch(serverId, webhookId, force) {
        if (!force) {
            const existingWebhook = this.client.webhooks.cache.get(webhookId);
            if (existingWebhook)
                return Promise.resolve(existingWebhook);
        }
        return this.client.rest.router
            .getWebhook(serverId, webhookId)
            .then((data) => {
            const newWebhook = new Webhook_1.Webhook(this.client, data.webhook);
            if (this.shouldCacheWebhook)
                this.cache.set(newWebhook.id, newWebhook);
            return newWebhook;
        });
    }
    /**
     * Update a webhook
     * @param serverId The ID of the server the webhook is in
     * @param webhookId The ID of the webhook to update
     * @param options The options for updating the webhook
     * @returns A Promise that resolves to the updated Webhook
     */
    update(serverId, webhookId, options) {
        return this.client.rest.router
            .updateWebhook(serverId, webhookId, options)
            .then((data) => {
            var _a, _b;
            return ((_b = (_a = this.cache.get(data.webhook.id)) === null || _a === void 0 ? void 0 : _a._update(data.webhook)) !== null && _b !== void 0 ? _b : new Webhook_1.Webhook(this.client, data.webhook));
        });
    }
    /**
     * Delete a webhook
     * @param serverId The ID of the server the webhook is in
     * @param webhookId The ID of the webhook to delete
     * @returns A Promise that resolves with the deleted webhook, or null if it was not cached
     */
    delete(serverId, webhookId) {
        return this.client.rest.router.deleteWebhook(serverId, webhookId);
    }
}
exports.GlobalWebhookManager = GlobalWebhookManager;
//# sourceMappingURL=WebhookManager.js.map