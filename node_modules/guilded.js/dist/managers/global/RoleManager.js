"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalRoleManager = void 0;
const GlobalManager_1 = require("./GlobalManager");
/**
 * A class representing a global role manager. At the moment, we don't cache roles in this structure.
 */
class GlobalRoleManager extends GlobalManager_1.GlobalManager {
    /**
     * Awards XP to a role.
     * @param serverId The ID of the server.
     * @param roleId The ID of the role.
     * @param amount The amount of XP to award.
     * @returns A Promise that resolves with the total XP awarded to the role.
     */
    giveXP(serverId, roleId, amount) {
        return this.client.rest.router
            .awardRoleXP(serverId, roleId.toString(), amount)
            .then((data) => data.total);
    }
    /**
     * Assigns a role to a member.
     * @param serverId The ID of the server.
     * @param memberId The ID of the member.
     * @param roleId The ID of the role.
     * @returns A Promise that resolves with no value upon successful completion.
     */
    addRoleToMember(serverId, memberId, roleId) {
        return this.client.rest.router
            .assignRoleToMember(serverId, memberId, roleId)
            .then(() => void 0);
    }
    /**
     * Removes a role from a member.
     * @param serverId The ID of the server.
     * @param memberId The ID of the member.
     * @param roleId The ID of the role.
     * @returns A Promise that resolves with no value upon successful completion.
     */
    removeRoleFromMember(serverId, memberId, roleId) {
        return this.client.rest.router
            .removeRoleFromMember(serverId, memberId, roleId)
            .then(() => void 0);
    }
}
exports.GlobalRoleManager = GlobalRoleManager;
//# sourceMappingURL=RoleManager.js.map