import { Collection } from "@discordjs/collection";
import type { RESTGetCalendarEventsBody, RESTPatchCalendarEventBody, RESTPostCalendarEventBody, RESTPatchCalendarEventRsvpBody } from "@guildedjs/guilded-api-typings";
import { CacheableStructManager } from "./CacheableStructManager";
import { CalendarEvent, CalendarEventRsvp } from "../../structures/CalendarEvent";
/**
 * The manager is used to interact with calendars on a server.
 */
export declare class GlobalCalendarManager extends CacheableStructManager<number, CalendarEvent> {
    get shouldCacheCalendar(): boolean;
    get shouldCacheCalendarRsvps(): boolean;
    /**
     * Creates a calendar event.
     * @param channelId The ID of the channel in which to create the event.
     * @param options The options for the event.
     * @returns A promise that resolves with the created calendar event.
     */
    create(channelId: string, options: RESTPostCalendarEventBody): Promise<CalendarEvent>;
    /**
     * Fetches a single calendar event.
     * @param channelId The ID of the channel in which to fetch the event.
     * @param calendarEventId The ID of the event to fetch.
     * @param force Whether or not to force a fetch instead of using a cached version.
     * @returns A promise that resolves with the fetched calendar event.
     */
    fetch(channelId: string, calendarEventId: number, force?: boolean): Promise<CalendarEvent>;
    /**
     * Fetches multiple calendar events.
     * @param channelId The ID of the channel in which to fetch the events.
     * @param options The options for the fetch.
     * @returns A promise that resolves with a collection of the fetched calendar events.
     */
    fetchMany(channelId: string, options: RESTGetCalendarEventsBody): Promise<Collection<number, CalendarEvent>>;
    /**
     * Updates a calendar event.
     * @param channelId The ID of the channel in which the event exists.
     * @param calendarEventId The ID of the event to update.
     * @param options The options for the update.
     * @returns A promise that resolves with the updated calendar event.
     */
    update(channelId: string, calendarEventId: number, options: RESTPatchCalendarEventBody): Promise<CalendarEvent>;
    /**
     * Delete a calendar event.
     * @param channelId - The ID of the channel where the calendar event is located.
     * @param calendarEventId - The ID of the calendar event to delete.
     * @returns A Promise that resolves with the deleted calendar event or `undefined` if the event was not cached.
     */
    delete(channelId: string, calendarEventId: number): Promise<CalendarEvent | void>;
    /**
     * Get a single RSVP from a calendar event.
     * @param channelId - The ID of the channel where the calendar event is located.
     * @param calendarEventId - The ID of the calendar event to get the RSVP from.
     * @param userId - The ID of the user who made the RSVP.
     * @param force - Whether to force a request to the API instead of returning the cached RSVP.
     * @returns A Promise that resolves with the requested RSVP.
     */
    fetchRsvp(channelId: string, calendarEventId: number, userId: string, force?: boolean): Promise<CalendarEventRsvp>;
    /**
     * Fetch RSVPs for a calendar event.
     * @param channelId - The ID of the channel where the calendar event is located.
     * @param calendarEventId - The ID of the calendar event to fetch RSVPs for.
     * @returns A Promise that resolves with a collection of RSVPs.
     */
    fetchManyRsvps(channelId: string, calendarEventId: number): Promise<Collection<string, CalendarEventRsvp>>;
    /**
     * Creates or updates an RSVP for a calendar event.
     * @param channelId The ID of the channel.
     * @param calendarEventId The ID of the calendar event.
     * @param userId The ID of the user.
     * @param options The options for updating the RSVP.
     * @returns A promise that resolves with the updated or created RSVP.
     */
    updateRsvp(channelId: string, calendarEventId: number, userId: string, options: RESTPatchCalendarEventRsvpBody): Promise<CalendarEventRsvp>;
    /**
     * Deletes an RSVP for a calendar event.
     * @param channelId The ID of the channel.
     * @param calendarEventId The ID of the calendar event.
     * @param userId The ID of the user.
     * @returns A promise that resolves with the deleted RSVP or void if it was not cached.
     */
    deleteRsvp(channelId: string, calendarEventId: number, userId: string): Promise<CalendarEventRsvp | void>;
}
//# sourceMappingURL=CalendarManager.d.ts.map